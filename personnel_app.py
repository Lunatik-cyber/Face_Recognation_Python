# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –ª–∏—Ü
–í–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏ –∏—Å—Ç–æ—Ä–∏—é –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–ª–∞–±—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞—Ö
"""

import tkinter as tk
from tkinter import ttk, messagebox, simpledialog, filedialog
import cv2
import numpy as np
import os
from PIL import Image, ImageTk
import threading
import time
from simple_face_recognizer import SimpleFaceRecognizer


class PersonnelApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü")
        self.root.geometry("1200x800")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è –ª–∏—Ü
        self.face_recognizer = SimpleFaceRecognizer()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
        self.current_language = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        
        # –°–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        self.translations = {
            "ru": {
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–∫–æ–Ω
                "main_title": "–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü",
                "add_person_title": "–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                "add_from_photo_title": "–î–æ–±–∞–≤–∏—Ç—å –∏–∑ —Ñ–æ—Ç–æ",
                "identify_title": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏—Ü–∞",
                "edit_person_title": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                "person_info_title": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ",
                "history_title": "–ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤",
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                "camera_control": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π",
                "start_camera": "–í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É",
                "stop_camera": "–í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É",
                "camera": "–ö–∞–º–µ—Ä–∞:",
                "recognition_on": "üîç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –í–ö–õ",
                "recognition_off": "üîç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –í–´–ö–õ",
                "language": "–Ø–∑—ã–∫:",
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                "main_actions": "–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
                "add_face": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏—Ü–æ",
                "identify_face": "üë§ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∏—Ü–æ",
                "add_from_photo": "üì∑ –î–æ–±–∞–≤–∏—Ç—å –∏–∑ —Ñ–æ—Ç–æ",
                "update_list": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                "edit_person": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                "person_info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                "delete_employee": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                "show_history": "üìä –ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤",
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å–ø–∏—Å–∫–∏
                "current_face_info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º –ª–∏—Ü–µ",
                "personnel_list": "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                "full_name": "–§–ò–û",
                "position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
                "age": "–í–æ–∑—Ä–∞—Å—Ç",
                "rank": "–ó–≤–∞–Ω–∏–µ",
                "status": "–°—Ç–∞—Ç—É—Å",
                "procentage": "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
                "validality": "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                "name": "–ò–º—è",
                
                # –§–æ—Ä–º—ã –≤–≤–æ–¥–∞
                "enter_full_name": "–§–ò–û:",
                "enter_position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å:",
                "enter_age": "–í–æ–∑—Ä–∞—Å—Ç:",
                "enter_rank": "–ó–≤–∞–Ω–∏–µ:",
                "save": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                "cancel": "–û—Ç–º–µ–Ω–∞",
                "select_photo": "–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ",
                
                # –°—Ç–∞—Ç—É—Å—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è
                "entered": "–í–æ—à–µ–ª",
                "exited": "–í—ã—à–µ–ª",
                "entry_time": "–í—Ä–µ–º—è –≤—Ö–æ–¥–∞",
                "exit_time": "–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞",
                "unknown": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
                "face_detected": "–õ–∏—Ü–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
                "person_detected": "–ß–µ–ª–æ–≤–µ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω",
                
                # –°–æ–æ–±—â–µ–Ω–∏—è
                "success": "–£—Å–ø–µ—Ö",
                "error": "–û—à–∏–±–∫–∞",
                "warning": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "information": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                "camera_on": "–ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞",
                "camera_off": "–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞",
                "camera_not_active": "–ö–∞–º–µ—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞",
                "no_face_detected": "–õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∫–∞–º–µ—Ä—É.",
                "person_added": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
                "person_updated": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                "select_person": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞",
                "confirm_delete": "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?",
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
                "choose_photo": "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
                "face_not_found": "–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                "confidence": "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                "time": "–í—Ä–µ–º—è",
                "date": "–î–∞—Ç–∞",
                "last_seen": "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≤–∏–¥–µ–Ω",
                "total_entries": "–í—Å–µ–≥–æ –≤—Ö–æ–¥–æ–≤",
                "current_status": "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å",
                "photo": "–§–æ—Ç–æ",
                "no_photo": "–ù–µ—Ç —Ñ–æ—Ç–æ",
                "employee_info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ",
                "entry_history": "–ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤",
                "edit": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                "delete": "–£–¥–∞–ª–∏—Ç—å",
                "close": "–ó–∞–∫—Ä—ã—Ç—å",
                "apply": "–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
                "refresh": "–û–±–Ω–æ–≤–∏—Ç—å",
                "loading": "–ó–∞–≥—Ä—É–∑–∫–∞...",
                "please_wait": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ",
                "not_found": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                "invalid_data": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                "operation_completed": "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                "operation_failed": "–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å",
                "person_added_db": "–¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!",
                "person_added_photo": "–¥–æ–±–∞–≤–ª–µ–Ω –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!",
                "entry_marked": "–í—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω!",
                "exit_marked": "–í—ã—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω!",
                "person_deleted": "—É–¥–∞–ª–µ–Ω!",
                "info_updated": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                "fill_all_fields": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!",
                "age_must_be_number": "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!",
                "failed_add_person": "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!",
                "no_faces_found": "–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Ü!",
                "failed_get_frame": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã!",
                "failed_record_entry": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ö–æ–¥!",
                "failed_record_exit": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥!",
                "failed_open_camera": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É",
                "select_employee_delete": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!",
                "select_employee_edit": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!",
                "select_employee_info": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!",
                "employee_info_not_found": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                "failed_update_info": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
                "confirmation": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "delete_employee_confirm": "–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                "failed_add_employee": "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
                "camera_inactive": "–ö–∞–º–µ—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!",
                "face_recognition_failed": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ª–∏—Ü–æ –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                "choose_action": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                "position_label": "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
                "age_label": "–í–æ–∑—Ä–∞—Å—Ç",
                "years_old": "–ª–µ—Ç",
                "rank_label": "–ó–≤–∞–Ω–∏–µ", 
                "current_status": "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å",
                "file_images": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                "file_jpeg": "JPEG —Ñ–∞–π–ª—ã",
                "file_png": "PNG —Ñ–∞–π–ª—ã",
                "file_all": "–í—Å–µ —Ñ–∞–π–ª—ã",
                "detected_face": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ:",
                "save_button": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                "cancel_button": "–û—Ç–º–µ–Ω–∞",
                "multiple_faces_warning": "–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ",
                "faces_found": "–ª–∏—Ü. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ.",
                "edit_title": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
                "edit_data": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:",
                "apply_button": "–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
                "close_button": "–ó–∞–∫—Ä—ã—Ç—å",
                "info_title": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ:",
                "main_info": "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                "photo_from_db": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                "last_entries": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ö–æ–¥—ã/–≤—ã—Ö–æ–¥—ã",
                "no_history": "–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                "entry_action": "–í–æ—à–µ–ª",
                "exit_action": "–í—ã—à–µ–ª",
                "identification": "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:",
                "employee": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫:",
                "confidence_label": "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:",
                "photo_from_database": "–§–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                "employee_info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ",
                "action_buttons": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                "entry_button": "üü¢ –í–æ—à–µ–ª",
                "exit_button": "üî¥ –í—ã—à–µ–ª",
                "cancel_action": "‚ùå –û—Ç–º–µ–Ω–∞",
                "history_window_title": "–ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤",
                "column_name": "–§–ò–û",
                "column_action": "–î–µ–π—Å—Ç–≤–∏–µ", 
                "column_time": "–í—Ä–µ–º—è"
            },
            
            "tm": {
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–∫–æ–Ω
                "main_title": "I≈üg√§rleri≈à hasabat ulgamy - √ù√ºz tanamak",
                "add_person_title": "I≈üg√§r go≈ümak",
                "add_from_photo_title": "Suratdan go≈ümak",
                "identify_title": "√ù√ºz kesgitlemek",
                "edit_person_title": "I≈üg√§ri √º√Ωtgetmek",
                "person_info_title": "I≈üg√§r barada maglumat",
                "history_title": "Giri≈ü/√ßyky≈ü taryhy",
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                "camera_control": "Kamera dolandyry≈ü",
                "start_camera": "Kamera a√ßmak",
                "stop_camera": "Kamera √Ωapmak",
                "camera": "Kamera:",
                "recognition_on": "üîç √ù√ºz tanamak A√áYK",
                "recognition_off": "üîç √ù√ºz tanamak √ùAPYK",
                "language": "Dil:",
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                "main_actions": "Esasy hereketler",
                "add_face": "‚ûï √ù√ºz go≈ümak",
                "identify_face": "üë§ √ù√ºz kesgitlemek",
                "add_from_photo": "üì∑ Suratdan go≈ümak",
                "update_list": "üîÑ Sanawy t√§zelemek",
                "edit_person": "‚úèÔ∏è √ú√Ωtgetmek",
                "person_info": "‚ÑπÔ∏è Ulanyjy barada",
                "delete_employee": "üóëÔ∏è I≈üg√§ri pozmak",
                "show_history": "üìä Giri≈ü/√ßyky≈ü taryhy",
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å–ø–∏—Å–∫–∏
                "current_face_info": "Tanalanan √Ω√ºz barada maglumat",
                "personnel_list": "I≈üg√§rler sanawy",
                "full_name": "Ady-famili√Ωasy",
                "position": "Wezipesi",
                "age": "√ùa≈üy",
                "rank": "Derejesi",
                "status": "√ùagda√Ωy",
                "procentage": "Ynany≈ü derejesi",
                "validality": "Ynamlylyk",
                "name": "Ady",
                
                # –§–æ—Ä–º—ã –≤–≤–æ–¥–∞
                "enter_full_name": "Ady-famili√Ωasy:",
                "enter_position": "Wezipesi:",
                "enter_age": "√ùa≈üy:",
                "enter_rank": "Derejesi:",
                "save": "√ùatda saklamak",
                "cancel": "√ùatyrmak",
                "select_photo": "Surat sa√Ωlamak",
                
                # –°—Ç–∞—Ç—É—Å—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è
                "entered": "Girdi",
                "exited": "√áykdy",
                "entry_time": "Giri≈ü wagty",
                "exit_time": "√áyky≈ü wagty",
                "unknown": "N√§belli",
                "face_detected": "√ù√ºz tapyldy",
                "person_detected": "Adam tapyldy",
                
                # –°–æ–æ–±—â–µ–Ω–∏—è
                "success": "√úst√ºnlik",
                "error": "√ùal≈ày≈ülyk",
                "warning": "Du√Ωdury≈ü",
                "information": "Maglumat",
                "camera_on": "Kamera a√ßyldy",
                "camera_off": "Kamera √Ωapyldy",
                "camera_not_active": "Kamera i≈üleme√Ω√§r",
                "no_face_detected": "√ù√ºz tapylmady! Kamera tarap seredi≈à.",
                "person_added": "I≈üg√§r √ºst√ºnlikli go≈üuldy!",
                "person_updated": "Maglumat t√§zelendi!",
                "select_person": "Sanawdan i≈üg√§r sa√Ωla≈à",
                "confirm_delete": "Bu i≈üg√§ri pozmak isle√Ω√§rsi≈àizmi?",
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
                "choose_photo": "Surat sa√Ωla≈à",
                "face_not_found": "Suratda √Ω√ºz tapylmady",
                "confidence": "Ynam",
                "time": "Wagt",
                "date": "Sene",
                "last_seen": "So≈àky g√∂rlen",
                "total_entries": "Jemi giri≈üler",
                "current_status": "H√§zirki √Ωagda√Ω",
                "photo": "Surat",
                "no_photo": "Surat √Ωok",
                "employee_info": "I≈üg√§r barada maglumat",
                "entry_history": "Giri≈ü taryhy",
                "edit": "√ú√Ωtgetmek",
                "delete": "Pozmak",
                "close": "√ùapmak",
                "apply": "Sakla",
                "refresh": "T√§zelemek",
                "loading": "√ù√ºklen√Ω√§r...",
                "please_wait": "Gara≈üy≈à",
                "not_found": "Tapylmady",
                "invalid_data": "N√§dogry maglumat",
                "operation_completed": "Amal tamamlandy",
                "operation_failed": "Amal ≈üowsuz",
                "person_added_db": "maglumat bazasyna go≈üuldy!",
                "person_added_photo": "suratdan go≈üuldy!",
                "entry_marked": "Giri≈ü bellenildi!",
                "exit_marked": "√áyky≈ü bellenildi!",
                "person_deleted": "pozuldy!",
                "info_updated": "I≈üg√§r barada maglumat t√§zelendi!",
                "fill_all_fields": "√Ñhli me√Ωdanlary doldury≈à!",
                "age_must_be_number": "√ùa≈ü san bolmaly!",
                "failed_add_person": "I≈üg√§r go≈üup bolmady!",
                "no_faces_found": "Suratda √Ω√ºz tapylmady!",
                "failed_get_frame": "Kameradan kadr alyp bolmady!",
                "failed_record_entry": "Giri≈üi √Ωazmak bolmady!",
                "failed_record_exit": "√áyky≈üy √Ωazmak bolmady!",
                "failed_open_camera": "Kamera a√ßyp bolmady",
                "select_employee_delete": "Pozmak √º√ßin i≈üg√§r sa√Ωla≈à!",
                "select_employee_edit": "√ú√Ωtgetmek √º√ßin i≈üg√§r sa√Ωla≈à!",
                "select_employee_info": "Maglumat g√∂rmek √º√ßin i≈üg√§r sa√Ωla≈à!",
                "employee_info_not_found": "I≈üg√§r barada maglumat tapylmady!",
                "failed_update_info": "Maglumat t√§zel√§p bolmady!",
                "confirmation": "Tassyklamak",
                "delete_employee_confirm": "I≈üg√§ri pozmak",
                "failed_add_employee": "I≈üg√§r go≈üup bolmady:",
                "camera_inactive": "Kamera i≈üleme√Ω√§r!",
                "face_recognition_failed": "√ù√ºz tanamak bolmady √Ωa-da adam maglumat bazasynda tapylmady.",
                "choose_action": "Hereketini sa√Ωla≈à",
                "position_label": "Wezipesi",
                "age_label": "√ùa≈üy",
                "years_old": "√Ωa≈ü",
                "rank_label": "Derejesi",
                "current_status": "H√§zirki √Ωagda√Ωy",
                "file_images": "Suratlar",
                "file_jpeg": "JPEG fa√Ωllar",
                "file_png": "PNG fa√Ωllar",
                "file_all": "√Ñhli fa√Ωllar",
                "detected_face": "Tapylan √Ω√ºz:",
                "save_button": "√ùatda saklamak",
                "cancel_button": "√ùatyrmak",
                "multiple_faces_warning": "Suratda tapyldy",
                "faces_found": "√Ω√ºz. Ilkinji tapylan √Ω√ºz ulanylar.",
                "edit_title": "√ú√Ωtgetmek:",
                "edit_data": "Maglumatlary √º√Ωtgetmek:",
                "apply_button": "Ulanmak",
                "close_button": "√ùapmak",
                "info_title": "I≈üg√§r barada maglumat:",
                "main_info": "Esasy maglumat",
                "photo_from_db": "Maglumat bazasyndan surat",
                "last_entries": "So≈àky giri≈üler/√ßyky≈ülar",
                "no_history": "Taryh tapylmady",
                "entry_action": "Girdi",
                "exit_action": "√áykdy",
                "identification": "Kesgitlemek:",
                "employee": "I≈üg√§r:",
                "confidence_label": "Ynam:",
                "photo_from_database": "Maglumat bazasyndan surat",
                "employee_info": "I≈üg√§r barada maglumat",
                "action_buttons": "Hereketini sa√Ωla≈à",
                "entry_button": "üü¢ Girdi",
                "exit_button": "üî¥ √áykdy",
                "cancel_action": "‚ùå √ùatyrmak",
                "history_window_title": "Giri≈üler/√ßyky≈ülar taryhy",
                "column_name": "Ady-famili√Ωasy",
                "column_action": "Hereket",
                "column_time": "Wagt"
            }
        }
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–º–µ—Ä—ã
        self.cap = None
        self.camera_active = False
        self.current_camera = 0
        self.detected_faces = []
        self.recognition_active = True
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.start_camera()
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
        self.update_thread = threading.Thread(target=self.update_frame, daemon=True)
        self.update_thread.start()
    
    def get_text(self, key):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞"""
        return self.translations[self.current_language].get(key, key)
    
    def change_language(self, language_code):
        """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if language_code in self.translations:
            self.current_language = language_code
            self.refresh_interface()
    
    def refresh_interface(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        self.root.title(self.get_text("main_title"))
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        was_camera_active = self.cap and self.cap.isOpened()
        if was_camera_active:
            self.stop_camera()
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        for widget in self.root.winfo_children():
            widget.destroy()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É –µ—Å–ª–∏ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if was_camera_active:
            self.start_camera()
    

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
        left_frame = ttk.Frame(self.root, width=600)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        right_frame = ttk.Frame(self.root, width=600)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # === –õ–ï–í–ê–Ø –ß–ê–°–¢–¨ - –í–ò–î–ï–û –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π
        camera_frame = ttk.LabelFrame(left_frame, text=self.get_text("camera_control"))
        camera_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞–º–µ—Ä—ã
        camera_row1 = ttk.Frame(camera_frame)
        camera_row1.pack(fill=tk.X, pady=5)
        
        ttk.Button(camera_row1, text=self.get_text("start_camera"), 
                  command=self.start_camera).pack(side=tk.LEFT, padx=5)
        ttk.Button(camera_row1, text=self.get_text("stop_camera"), 
                  command=self.stop_camera).pack(side=tk.LEFT, padx=5)
        
        # –í—ã–±–æ—Ä –∫–∞–º–µ—Ä—ã
        ttk.Label(camera_row1, text=self.get_text("camera")).pack(side=tk.LEFT, padx=(10, 5))
        self.camera_var = tk.StringVar(value="0")
        camera_combo = ttk.Combobox(camera_row1, textvariable=self.camera_var, 
                                   values=["0", "1", "2", "3"], width=5)
        camera_combo.pack(side=tk.LEFT, padx=5)
        camera_combo.bind('<<ComboboxSelected>>', self.change_camera)
        
        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
        ttk.Label(camera_row1, text=self.get_text("language")).pack(side=tk.LEFT, padx=(10, 5))
        self.language_var = tk.StringVar(value="ru")
        language_combo = ttk.Combobox(camera_row1, textvariable=self.language_var, 
                                     values=["ru", "tm"], width=5)
        language_combo.pack(side=tk.LEFT, padx=5)
        language_combo.bind('<<ComboboxSelected>>', self.on_language_change)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ (Toggle –∫–Ω–æ–ø–∫–∏)
        toggles_frame = ttk.Frame(camera_row1)
        toggles_frame.pack(side=tk.RIGHT, padx=10)
        
        # Toggle –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.recognition_var = tk.BooleanVar(value=True)
        self.recognition_toggle_btn = ttk.Button(toggles_frame, text=self.get_text("recognition_on"), 
                                               command=self.toggle_recognition, width=20)
        self.recognition_toggle_btn.pack(side=tk.LEFT, padx=2)
        
        # –í–∏–¥–µ–æ –æ–±–ª–∞—Å—Ç—å
        self.video_label = ttk.Label(left_frame, text=self.get_text("camera_not_active"), 
                                    background="black", foreground="white")
        self.video_label.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # === –ì–õ–ê–í–ù–´–ï –ö–ù–û–ü–ö–ò –î–ï–ô–°–¢–í–ò–ô (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –Ω–∞–≤–µ—Ä—Ö –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏) ===
        main_actions_frame = ttk.LabelFrame(right_frame, text=self.get_text("main_actions"))
        main_actions_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        actions_row1 = ttk.Frame(main_actions_frame)
        actions_row1.pack(fill=tk.X, pady=2)

        btn_width = 22  # –û–¥–∏–Ω–∞–∫–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫

        ttk.Button(actions_row1, text=self.get_text("add_face"),
              command=self.add_person_dialog, style="Action.TButton", width=btn_width).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        ttk.Button(actions_row1, text=self.get_text("identify_face"),
              command=self.identify_person_dialog, style="Action.TButton", width=btn_width).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        actions_row2 = ttk.Frame(main_actions_frame)
        actions_row2.pack(fill=tk.X, pady=2)

        ttk.Button(actions_row2, text=self.get_text("add_from_photo"),
              command=self.add_from_photo_dialog, style="Action.TButton", width=btn_width).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        ttk.Button(actions_row2, text=self.get_text("update_list"),
              command=self.update_personnel_list, style="Action.TButton", width=btn_width).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        actions_row3 = ttk.Frame(main_actions_frame)
        actions_row3.pack(fill=tk.X, pady=2)

        ttk.Button(actions_row3, text=self.get_text("edit_person"),
              command=self.edit_person_dialog, style="Action.TButton", width=btn_width).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        ttk.Button(actions_row3, text=self.get_text("person_info"),
              command=self.show_person_info, style="Action.TButton", width=btn_width).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        actions_row4 = ttk.Frame(main_actions_frame)
        actions_row4.pack(fill=tk.X, pady=2)

        ttk.Button(actions_row4, text=self.get_text("delete_employee"),
              command=self.delete_person, style="Delete.TButton", width=btn_width).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        ttk.Button(actions_row4, text=self.get_text("show_history"),
              command=self.show_history, style="Action.TButton", width=btn_width).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ª–∏—Ü–µ
        current_info_frame = ttk.LabelFrame(right_frame, text=self.get_text("current_face_info"))
        current_info_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.current_info_text = tk.Text(current_info_frame, height=10, state=tk.DISABLED, 
                                        font=("Arial", 9))
        self.current_info_text.pack(fill=tk.X, padx=5, pady=5)
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        personnel_frame = ttk.LabelFrame(right_frame, text=self.get_text("personnel_list"))
        personnel_frame.pack(fill=tk.BOTH, expand=True)
        
        # Treeview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        columns = (self.get_text("full_name"), self.get_text("position"), 
                  self.get_text("age"), self.get_text("rank"), self.get_text("status"))
        self.personnel_tree = ttk.Treeview(personnel_frame, columns=columns, show="headings", height=6)
        
        for col in columns:
            self.personnel_tree.heading(col, text=col)
            self.personnel_tree.column(col, width=100)
        
        personnel_scrollbar = ttk.Scrollbar(personnel_frame, orient=tk.VERTICAL, 
                                          command=self.personnel_tree.yview)
        self.personnel_tree.configure(yscrollcommand=personnel_scrollbar.set)
        
        self.personnel_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        personnel_scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∫–Ω–æ–ø–æ–∫
        style = ttk.Style()
        style.configure("Action.TButton", font=("Arial", 9, "bold"))
        style.configure("Delete.TButton", font=("Arial", 9, "bold"), foreground="red")
        style.configure("Success.TButton", font=("Arial", 9, "bold"), foreground="green")
        style.configure("Warning.TButton", font=("Arial", 9, "bold"), foreground="orange")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        self.update_personnel_list()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ toggle –∫–Ω–æ–ø–æ–∫
        self.recognition_toggle_btn.configure(style="Success.TButton")
    
    def center_window(self, window, width, height):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root.update_idletasks()
        main_x = self.root.winfo_x()
        main_y = self.root.winfo_y()
        main_width = self.root.winfo_width()
        main_height = self.root.winfo_height()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        x = main_x + (main_width - width) // 2
        y = main_y + (main_height - height) // 2
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é
        window.geometry(f"{width}x{height}+{x}+{y}")
    
    def start_camera(self):
        """–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã"""
        if not self.cap or not self.cap.isOpened():
            self.cap = cv2.VideoCapture(self.current_camera)
            if self.cap.isOpened():
                # –ö–∞–º–µ—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞
                messagebox.showinfo(self.get_text("success"), self.get_text("camera_on"))
            else:
                messagebox.showerror(self.get_text("error"), f"{self.get_text('failed_open_camera')} {self.current_camera}")
    
    def stop_camera(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã"""
        if self.cap:
            # –ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            self.cap.release()
            self.video_label.configure(image="", text=self.get_text("camera_not_active"))
            messagebox.showinfo(self.get_text("information"), self.get_text("camera_off"))
    
    def toggle_recognition(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        current_state = self.recognition_var.get()
        self.recognition_var.set(not current_state)
        
        if self.recognition_var.get():
            # –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            self.recognition_toggle_btn.configure(text=self.get_text("recognition_on"), style="Success.TButton")
        else:
            # –í—ã–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            self.recognition_toggle_btn.configure(text=self.get_text("recognition_off"), style="Warning.TButton")
            self.clear_current_info()
    
    def on_recognition_toggle(self, *args):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        if not self.recognition_var.get():
            # –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.clear_current_info()
    
    def change_camera(self, event=None):
        """–°–º–µ–Ω–∞ –∫–∞–º–µ—Ä—ã"""
        if self.cap and self.cap.isOpened():
            self.stop_camera()
        
        self.current_camera = int(self.camera_var.get())
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã
        self.start_camera()
    
    def on_language_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
        new_language = self.language_var.get()
        if new_language != self.current_language:
            self.change_language(new_language)
    
    def put_text_utf8(self, image, text, position, font_scale=2, color=(255, 255, 255), thickness=2):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ UTF-8 —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —á–µ—Ä–µ–∑ PIL
            from PIL import Image as PILImage, ImageDraw, ImageFont
            import numpy as np
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB
            if len(image.shape) == 3:
                pil_image = PILImage.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
            else:
                pil_image = PILImage.fromarray(image)
            
            draw = ImageDraw.Draw(pil_image)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
            try:
                # –î–ª—è Windows
                font = ImageFont.truetype("arial.ttf", int(38 * font_scale))
            except:
                try:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è Windows
                    font = ImageFont.truetype("C:/Windows/Fonts/arial.ttf", int(38 * font_scale))
                except:
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç PIL
                    font = ImageFont.load_default()
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
            x, y = position
            draw.text((x, y - 20), text, font=font, fill=color[::-1])  # BGR -> RGB
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
            cv_image = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image[:] = cv_image[:]
            
        except Exception as e:
            # –ï—Å–ª–∏ PIL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é
            try:
                # –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                transliteration = {
                    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
                    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
                    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
                    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
                    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
                    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'YO',
                    '–ñ': 'ZH', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
                    '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
                    '–§': 'F', '–•': 'H', '–¶': 'TS', '–ß': 'CH', '–®': 'SH', '–©': 'SCH',
                    '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'YU', '–Ø': 'YA',
                    ' ': ' ', '.': '.', ',': ',', '!': '!', '?': '?', ':': ':', ';': ';',
                    '(': '(', ')': ')', '-': '-', '_': '_'
                }
                
                transliterated_text = ''
                for char in text:
                    if char in transliteration:
                        transliterated_text += transliteration[char]
                    elif char.isascii():
                        transliterated_text += char
                    else:
                        transliterated_text += '?'
                
                cv2.putText(image, transliterated_text, position, cv2.FONT_HERSHEY_SIMPLEX, font_scale, color, thickness)
                
            except:
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤—ã–≤–æ–¥–∏–º –∑–∞–≥–ª—É—à–∫—É
                cv2.putText(image, "Person detected", position, cv2.FONT_HERSHEY_SIMPLEX, font_scale, color, thickness)
    
    def update_frame(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ –¥–ª—è —Å–ª–∞–±—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"""
        frame_count = 0
        recognition_interval = 5  # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π 5-–π –∫–∞–¥—Ä –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        while True:
            if self.cap and self.cap.isOpened():
                ret, frame = self.cap.read()
                if ret:
                    # –û—Ç—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    frame = cv2.flip(frame, 1)
                    
                    # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    processing_frame = cv2.resize(frame, (320, 240))
                    
                    # –î–µ—Ç–µ–∫—Ü–∏—è –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                    if self.recognition_var.get() and frame_count % recognition_interval == 0:
                        self.detected_faces = self.face_recognizer.detect_faces(processing_frame)
                        
                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
                        scale_x = frame.shape[1] / 320
                        scale_y = frame.shape[0] / 240
                        
                        for face in self.detected_faces:
                            x, y, w, h = face['coordinates']
                            x = int(x * scale_x)
                            y = int(y * scale_y)
                            w = int(w * scale_x)
                            h = int(h * scale_y)
                            face['coordinates'] = (x, y, w, h)
                            
                            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü–∞
                            name, confidence = self.face_recognizer.recognize_face(face['face_roi'])
                            face['name'] = name
                            face['confidence'] = confidence
                    
                    # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç–æ–ª—å–∫–æ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ª–∏—Ü–∞
                    elif not self.recognition_var.get() and frame_count % recognition_interval == 0:
                        self.detected_faces = self.face_recognizer.detect_faces(processing_frame)
                        
                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
                        scale_x = frame.shape[1] / 320
                        scale_y = frame.shape[0] / 240
                        
                        for face in self.detected_faces:
                            x, y, w, h = face['coordinates']
                            x = int(x * scale_x)
                            y = int(y * scale_y)
                            w = int(w * scale_x)
                            h = int(h * scale_y)
                            face['coordinates'] = (x, y, w, h)
                            # –ë–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –¥–µ—Ç–µ–∫—Ü–∏—è
                            face['name'] = None
                            face['confidence'] = 0.0
                    
                    # –û—á–∏—â–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ
                    elif not self.recognition_var.get():
                        if hasattr(self, 'detected_faces'):
                            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                            for face in self.detected_faces:
                                face['name'] = None
                                face['confidence'] = 0.0
                    
                    # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if hasattr(self, 'detected_faces') and self.detected_faces:
                        for face in self.detected_faces:
                            x, y, w, h = face['coordinates']
                            
                            # –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                            if self.recognition_var.get():
                                color = (0, 255, 0) if face.get('name') else (0, 0, 255)
                            else:
                                color = (255, 255, 0)  # –ñ–µ–ª—Ç–∞—è —Ä–∞–º–∫–∞ –∫–æ–≥–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                            
                            cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
                            if self.recognition_var.get():
                                name = face.get('name')
                                confidence = face.get('confidence', 0.0)
                                
                                if name and confidence > 0.65:
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                                    self.put_text_utf8(frame, f"{name} ({confidence:.2f})", 
                                                     (x, y - 10), 0.6, (0, 255, 0), 2)
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ª–∏—Ü–µ
                                    self.update_current_info(name, confidence)
                                else:
                                    self.put_text_utf8(frame, self.get_text("unknown"), 
                                                     (x, y - 10), 0.6, (0, 0, 255), 2)
                            else:
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –ª–∏—Ü–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
                                self.put_text_utf8(frame, self.get_text("face_detected"), 
                                                 (x, y - 10), 0.6, (255, 255, 0), 2)
                        
                        # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ
                        if not self.recognition_var.get():
                            if frame_count % recognition_interval == 0:
                                self.clear_current_info()
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ tkinter —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    frame_resized = cv2.resize(frame_rgb, (580, 400))
                    img = Image.fromarray(frame_resized)
                    photo = ImageTk.PhotoImage(image=img)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    self.video_label.configure(image=photo, text="")
                    self.video_label.image = photo
                    
                    frame_count += 1
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            time.sleep(0.05)  # ~20 FPS –≤–º–µ—Å—Ç–æ 30 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    
    def add_person_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        if not self.detected_faces:
            messagebox.showwarning(self.get_text("warning"), self.get_text("no_face_detected"))
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        dialog = tk.Toplevel(self.root)
        dialog.title(self.get_text("add_person_title"))
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window(dialog, 500, 500)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        ttk.Label(dialog, text=self.get_text("enter_full_name")).pack(pady=5)
        name_entry = ttk.Entry(dialog, width=40)
        name_entry.pack(pady=5)
        
        ttk.Label(dialog, text=self.get_text("enter_position")).pack(pady=5)
        position_entry = ttk.Entry(dialog, width=40)
        position_entry.pack(pady=5)
        
        ttk.Label(dialog, text=self.get_text("enter_age")).pack(pady=5)
        age_entry = ttk.Entry(dialog, width=40)
        age_entry.pack(pady=5)
        
        ttk.Label(dialog, text=self.get_text("enter_rank")).pack(pady=5)
        rank_entry = ttk.Entry(dialog, width=40)
        rank_entry.pack(pady=5)
        
        def save_person():
            name = name_entry.get().strip()
            position = position_entry.get().strip()
            age = age_entry.get().strip()
            rank = rank_entry.get().strip()
            
            if not all([name, position, age, rank]):
                messagebox.showerror(self.get_text("error"), self.get_text("fill_all_fields"))
                return
            
            try:
                age = int(age)
            except ValueError:
                messagebox.showerror(self.get_text("error"), self.get_text("age_must_be_number"))
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            person_info = {
                'name': name,
                'position': position,
                'age': age,
                'rank': rank
            }
            
            face_roi = self.detected_faces[0]['face_roi']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            original_frame = None
            if self.cap and self.cap.isOpened():
                ret, frame = self.cap.read()
                if ret:
                    original_frame = cv2.flip(frame, 1)  # –û—Ç—Ä–∞–∂–∞–µ–º –∫–∞–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            
            success = self.face_recognizer.add_person(face_roi, person_info, original_frame)
            
            if success:
                messagebox.showinfo(self.get_text("success"), f"{name} {self.get_text('person_added_db')}")
                self.update_personnel_list()
                dialog.destroy()
            else:
                messagebox.showerror(self.get_text("error"), self.get_text("failed_add_person"))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(dialog)
        buttons_frame.pack(pady=20)
        
        ttk.Button(buttons_frame, text=self.get_text("save"), command=save_person).pack(side=tk.LEFT, padx=10)
        ttk.Button(buttons_frame, text=self.get_text("cancel"), command=dialog.destroy).pack(side=tk.LEFT, padx=10)
    
    def add_from_photo_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_path = filedialog.askopenfilename(
            title=self.get_text("choose_photo"),
            filetypes=[
                (self.get_text("file_images"), "*.jpg *.jpeg *.png *.bmp *.tiff"),
                (self.get_text("file_jpeg"), "*.jpg *.jpeg"),
                (self.get_text("file_png"), "*.png"),
                (self.get_text("file_all"), "*.*")
            ]
        )
        
        if not file_path:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏—Ü–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        faces = self.face_recognizer.detect_faces_from_image(file_path)
        
        if not faces:
            messagebox.showerror(self.get_text("error"), self.get_text("no_faces_found"))
            return
        
        if len(faces) > 1:
            messagebox.showwarning(self.get_text("warning"), 
                                 f"{self.get_text('multiple_faces_warning')} {len(faces)} {self.get_text('faces_found')}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        dialog = tk.Toplevel(self.root)
        dialog.title(self.get_text("add_from_photo_title"))
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window(dialog, 400, 600)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞
        face_roi = faces[0]['face_roi']
        face_image = Image.fromarray(face_roi)
        face_image = face_image.resize((100, 100))
        face_photo = ImageTk.PhotoImage(face_image)
        
        ttk.Label(dialog, text=self.get_text("detected_face")).pack(pady=5)
        face_label = ttk.Label(dialog, image=face_photo)
        face_label.image = face_photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        face_label.pack(pady=5)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        ttk.Label(dialog, text=self.get_text("enter_full_name")).pack(pady=5)
        name_entry = ttk.Entry(dialog, width=40)
        name_entry.pack(pady=5)
        
        ttk.Label(dialog, text=self.get_text("enter_position")).pack(pady=5)
        position_entry = ttk.Entry(dialog, width=40)
        position_entry.pack(pady=5)
        
        ttk.Label(dialog, text=self.get_text("enter_age")).pack(pady=5)
        age_entry = ttk.Entry(dialog, width=40)
        age_entry.pack(pady=5)
        
        ttk.Label(dialog, text=self.get_text("enter_rank")).pack(pady=5)
        rank_entry = ttk.Entry(dialog, width=40)
        rank_entry.pack(pady=5)
        
        def save_person_from_photo():
            name = name_entry.get().strip()
            position = position_entry.get().strip()
            age = age_entry.get().strip()
            rank = rank_entry.get().strip()
            
            if not all([name, position, age, rank]):
                messagebox.showerror(self.get_text("error"), self.get_text("fill_all_fields"))
                return
            
            try:
                age = int(age)
            except ValueError:
                messagebox.showerror(self.get_text("error"), self.get_text("age_must_be_number"))
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            person_info = {
                'name': name,
                'position': position,
                'age': age,
                'rank': rank
            }
            
            success, message = self.face_recognizer.add_person_from_image(file_path, person_info)
            
            if success:
                messagebox.showinfo(self.get_text("success"), f"{name} {self.get_text('person_added_photo')}")
                self.update_personnel_list()
                dialog.destroy()
            else:
                messagebox.showerror(self.get_text("error"), f"{self.get_text('failed_add_employee')} {message}")
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(dialog)
        buttons_frame.pack(pady=20)
        
        ttk.Button(buttons_frame, text=self.get_text("save_button"), command=save_person_from_photo).pack(side=tk.LEFT, padx=10)
        ttk.Button(buttons_frame, text=self.get_text("cancel_button"), command=dialog.destroy).pack(side=tk.LEFT, padx=10)
    
    def identify_person_dialog(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏—Ü–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if not self.cap or not self.cap.isOpened():
            messagebox.showwarning(self.get_text("warning"), self.get_text("camera_inactive"))
            return
            
        ret, frame = self.cap.read()
        if not ret:
            messagebox.showwarning(self.get_text("warning"), self.get_text("failed_get_frame"))
            return
        
        # –û—Ç—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        frame = cv2.flip(frame, 1)
        
        # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ª–∏—Ü–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫–∞–¥—Ä–µ
        detected_faces = self.face_recognizer.detect_faces(frame)
        
        if not detected_faces:
            messagebox.showwarning(self.get_text("warning"), self.get_text("no_face_detected"))
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ
        face_roi = detected_faces[0]['face_roi']
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –ª–∏—Ü–æ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —á—Ç–æ –∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
        name, confidence = self.face_recognizer.recognize_face(face_roi)
        
        if not name or confidence < 0.65:  # –¢–æ—Ç –∂–µ –ø–æ—Ä–æ–≥ —á—Ç–æ –∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
            messagebox.showwarning(self.get_text("warning"), 
                                 f"{self.get_text('face_recognition_failed')} ({self.get_text('confidence')}: {confidence:.2%})")
            return
        
        # –î–∏–∞–ª–æ–≥ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        dialog = tk.Toplevel(self.root)
        dialog.title(f"{self.get_text('identification')} {name}")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window(dialog, 400, 700)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(dialog)
        title_frame.pack(pady=10)
        
        ttk.Label(title_frame, text=f"{self.get_text('employee')} {name}", font=("Arial", 14, "bold")).pack()
        ttk.Label(title_frame, text=f"{self.get_text('confidence_label')} {confidence:.2%}", font=("Arial", 10)).pack()
        
        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        photo_frame = ttk.LabelFrame(dialog, text=self.get_text("photo_from_database"))
        photo_frame.pack(pady=10, padx=20, fill=tk.X)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        person_info = self.face_recognizer.get_person_info(name)
        photo_shown = False
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ñ–∞–π–ª–∞
        if person_info and 'photo_path' in person_info:
            try:
                photo_path = person_info['photo_path']
                if os.path.exists(photo_path):
                    face_image = cv2.imread(photo_path)
                    if face_image is not None:
                        face_image = cv2.resize(face_image, (150, 150))
                        face_image_rgb = cv2.cvtColor(face_image, cv2.COLOR_BGR2RGB)
                        
                        face_pil = Image.fromarray(face_image_rgb)
                        face_photo = ImageTk.PhotoImage(face_pil)
                        
                        photo_label = ttk.Label(photo_frame, image=face_photo)
                        photo_label.image = face_photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                        photo_label.pack(pady=10)
                        photo_shown = True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ñ–∞–π–ª–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑ –ø–∞–º—è—Ç–∏
        if not photo_shown:
            stored_faces = self.face_recognizer.get_stored_face_images(name)
            if stored_faces:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                face_image = stored_faces[0]
                face_image = cv2.resize(face_image, (150, 150))
                face_image_rgb = cv2.cvtColor(face_image, cv2.COLOR_GRAY2RGB) if len(face_image.shape) == 2 else face_image
                
                face_pil = Image.fromarray(face_image_rgb)
                face_photo = ImageTk.PhotoImage(face_pil)
                
                photo_label = ttk.Label(photo_frame, image=face_photo)
                photo_label.image = face_photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                photo_label.pack(pady=10)
                photo_shown = True
        
        if not photo_shown:
            ttk.Label(photo_frame, text="–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", font=("Arial", 10, "italic")).pack(pady=20)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        info_frame = ttk.LabelFrame(dialog, text=self.get_text("employee_info"))
        info_frame.pack(pady=10, padx=20, fill=tk.X)
        
        person_info = self.face_recognizer.get_person_info(name)
        if person_info:
            info_text = f"""{self.get_text('position_label')}: {person_info['position']}
{self.get_text('age_label')}: {person_info['age']} {self.get_text('years_old')}
{self.get_text('rank_label')}: {person_info['rank']}
{self.get_text('current_status')}: {person_info['status']}"""
            
            ttk.Label(info_frame, text=info_text, font=("Arial", 9), justify=tk.LEFT).pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_frame = ttk.LabelFrame(dialog, text=self.get_text("choose_action"))
        action_frame.pack(pady=20, padx=20, fill=tk.X)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = {'action': None}
        
        def record_entry():
            result['action'] = '–í–æ—à–µ–ª'
            success = self.face_recognizer.record_entry_exit(name, '–í–æ—à–µ–ª')
            if success:
                messagebox.showinfo(self.get_text("success"), f"{name} - {self.get_text('entry_marked')}")
                self.update_personnel_list()
                self.update_current_info(name, confidence)
                dialog.destroy()
            else:
                messagebox.showerror(self.get_text("error"), self.get_text("failed_record_entry"))
        
        def record_exit():
            result['action'] = '–í—ã—à–µ–ª'
            success = self.face_recognizer.record_entry_exit(name, '–í—ã—à–µ–ª')
            if success:
                messagebox.showinfo(self.get_text("success"), f"{name} - {self.get_text('exit_marked')}")
                self.update_personnel_list()
                self.update_current_info(name, confidence)
                dialog.destroy()
            else:
                messagebox.showerror(self.get_text("error"), self.get_text("failed_record_exit"))
        
        def cancel_action():
            result['action'] = '–û—Ç–º–µ–Ω–∞'
            dialog.destroy()
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        buttons_frame = ttk.Frame(action_frame)
        buttons_frame.pack(pady=15)
        
        ttk.Button(buttons_frame, text=self.get_text("entry_button"), command=record_entry, 
                  style="Success.TButton", width=12).pack(side=tk.TOP, pady=5, fill=tk.X)
        ttk.Button(buttons_frame, text=self.get_text("exit_button"), command=record_exit, 
                  style="Danger.TButton", width=12).pack(side=tk.TOP, pady=5, fill=tk.X)
        ttk.Button(buttons_frame, text=self.get_text("cancel_action"), command=cancel_action, 
                  style="Default.TButton", width=12).pack(side=tk.TOP, pady=5, fill=tk.X)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∫–Ω–æ–ø–æ–∫
        style = ttk.Style()
        style.configure("Success.TButton", font=("Arial", 10, "bold"))
        style.configure("Danger.TButton", font=("Arial", 10, "bold"))
        style.configure("Default.TButton", font=("Arial", 10))
    
    def update_current_info(self, name, confidence):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ª–∏—Ü–µ"""
        person_info = self.face_recognizer.get_person_info(name)
        
        if person_info:
            info_text = f"""
{self.get_text("full_name")}: {person_info['name']}
{self.get_text("position")}: {person_info['position']}
{self.get_text("age")}: {person_info['age']} –ª–µ—Ç
{self.get_text("rank")}: {person_info['rank']}
{self.get_text("status")}: {person_info['status']}
{self.get_text("entry_time")}: {person_info['entry_time'] or '–ù–µ –æ—Ç–º–µ—á–µ–Ω–æ'}
{self.get_text("exit_time")}: {person_info['exit_time'] or '–ù–µ –æ—Ç–º–µ—á–µ–Ω–æ'}
{self.get_text("procentage")}: {confidence:.2%}
"""
        else:
            info_text = f"{self.get_text('name')}: {name}\n{self.get_text('validality')}: {confidence:.2%}\n{self.get_text('employee_info_not_found')}"
        
        self.current_info_text.config(state=tk.NORMAL)
        self.current_info_text.delete(1.0, tk.END)
        self.current_info_text.insert(1.0, info_text)
        self.current_info_text.config(state=tk.DISABLED)
    
    def clear_current_info(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ª–∏—Ü–µ"""
        self.current_info_text.config(state=tk.NORMAL)
        self.current_info_text.delete(1.0, tk.END)
        self.current_info_text.insert(1.0, f"{self.get_text("unknown")}")
        self.current_info_text.config(state=tk.DISABLED)
    
    def update_personnel_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for item in self.personnel_tree.get_children():
            self.personnel_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        for name in self.face_recognizer.get_all_persons():
            person_info = self.face_recognizer.get_person_info(name)
            if person_info:
                self.personnel_tree.insert("", tk.END, values=(
                    person_info['name'],
                    person_info['position'],
                    person_info['age'],
                    person_info['rank'],
                    person_info['status']
                ))
    
    def delete_person(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        selected = self.personnel_tree.selection()
        if not selected:
            messagebox.showwarning(self.get_text("warning"), self.get_text("select_employee_delete"))
            return
        
        item = self.personnel_tree.item(selected[0])
        name = item['values'][0]
        
        if messagebox.askyesno(self.get_text("confirmation"), f"{self.get_text('delete_employee_confirm')} {name}?"):
            self.face_recognizer.delete_person(name)
            self.update_personnel_list()
            messagebox.showinfo(self.get_text("success"), f"{name} {self.get_text('person_deleted')}")
    
    def show_history(self):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤"""
        history_window = tk.Toplevel(self.root)
        history_window.title(self.get_text("history_window_title"))
        history_window.transient(self.root)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window(history_window, 700, 500)
        
        # Treeview –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        columns = (self.get_text("column_name"), self.get_text("column_action"), self.get_text("column_time"))
        history_tree = ttk.Treeview(history_window, columns=columns, show="headings")
        
        for col in columns:
            history_tree.heading(col, text=col)
            history_tree.column(col, width=200)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
        history = self.face_recognizer.get_entry_history()
        for entry in reversed(history):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–≤–µ—Ä—Ö—É
            history_tree.insert("", tk.END, values=(
                entry['name'],
                entry['action'],
                entry['time']
            ))
        
        history_tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ttk.Button(history_window, text=self.get_text("close_button"), 
                  command=history_window.destroy).pack(pady=10)
    
    def edit_person_dialog(self):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ"""
        selected = self.personnel_tree.selection()
        if not selected:
            messagebox.showwarning(self.get_text("warning"), self.get_text("select_employee_edit"))
            return
        
        item = self.personnel_tree.item(selected[0])
        name = item['values'][0]
        person_info = self.face_recognizer.get_person_info(name)
        
        if not person_info:
            messagebox.showerror(self.get_text("error"), self.get_text("employee_info_not_found"))
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        dialog = tk.Toplevel(self.root)
        dialog.title(f"{self.get_text('edit_title')} {name}")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window(dialog, 450, 350)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(dialog, text=f"{self.get_text('edit_data')} {name}", 
                 font=("Arial", 12, "bold")).pack(pady=10)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        ttk.Label(dialog, text=self.get_text("enter_full_name")).pack(pady=5)
        name_entry = ttk.Entry(dialog, width=40)
        name_entry.insert(0, person_info['name'])
        name_entry.pack(pady=5)
        
        ttk.Label(dialog, text=self.get_text("enter_position")).pack(pady=5)
        position_entry = ttk.Entry(dialog, width=40)
        position_entry.insert(0, person_info['position'])
        position_entry.pack(pady=5)
        
        ttk.Label(dialog, text=self.get_text("enter_age")).pack(pady=5)
        age_entry = ttk.Entry(dialog, width=40)
        age_entry.insert(0, str(person_info['age']))
        age_entry.pack(pady=5)
        
        ttk.Label(dialog, text=self.get_text("enter_rank")).pack(pady=5)
        rank_entry = ttk.Entry(dialog, width=40)
        rank_entry.insert(0, person_info['rank'])
        rank_entry.pack(pady=5)
        
        def save_changes():
            new_name = name_entry.get().strip()
            new_position = position_entry.get().strip()
            new_age = age_entry.get().strip()
            new_rank = rank_entry.get().strip()
            
            if not all([new_name, new_position, new_age, new_rank]):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return
            
            try:
                new_age = int(new_age)
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            updated_info = {
                'name': new_name,
                'position': new_position,
                'age': new_age,
                'rank': new_rank
            }
            
            success = self.face_recognizer.update_person_info(name, updated_info)
            
            if success:
                messagebox.showinfo(self.get_text("success"), self.get_text("info_updated"))
                self.update_personnel_list()
                dialog.destroy()
            else:
                messagebox.showerror(self.get_text("error"), self.get_text("failed_update_info"))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(dialog)
        buttons_frame.pack(pady=20)
        
        ttk.Button(buttons_frame, text=self.get_text("apply_button"), command=save_changes).pack(side=tk.LEFT, padx=10)
        ttk.Button(buttons_frame, text=self.get_text("cancel_button"), command=dialog.destroy).pack(side=tk.LEFT, padx=10)
    
    def show_person_info(self):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ"""
        selected = self.personnel_tree.selection()
        if not selected:
            messagebox.showwarning(self.get_text("warning"), self.get_text("select_employee_info"))
            return
        
        item = self.personnel_tree.item(selected[0])
        name = item['values'][0]
        person_info = self.face_recognizer.get_person_info(name)
        
        if not person_info:
            messagebox.showerror(self.get_text("error"), self.get_text("employee_info_not_found"))
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        info_window = tk.Toplevel(self.root)
        info_window.title(f"{self.get_text('info_title')} {name}")
        info_window.transient(self.root)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window(info_window, 500, 600)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        main_frame = ttk.LabelFrame(info_window, text=self.get_text("main_info"))
        main_frame.pack(pady=10, padx=20, fill=tk.X)
        
        info_text = f"""{self.get_text('full_name')}: {person_info['name']}
{self.get_text('position')}: {person_info['position']}
{self.get_text('age')}: {person_info['age']} {self.get_text('years_old')}
{self.get_text('rank')}: {person_info['rank']}
{self.get_text('current_status')}: {person_info['status']}
{self.get_text('entry_time')}: {person_info.get('entry_time', self.get_text('not_found'))}
{self.get_text('exit_time')}: {person_info.get('exit_time', self.get_text('not_found'))}"""
        
        ttk.Label(main_frame, text=info_text, font=("Arial", 10), justify=tk.LEFT).pack(pady=10)
        
        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
        photo_frame = ttk.LabelFrame(info_window, text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        photo_frame.pack(pady=10, padx=20, fill=tk.X)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        original_photo_path = person_info.get('original_photo_path')
        face_photo_path = person_info.get('face_photo_path')
        
        if original_photo_path and os.path.exists(original_photo_path):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            try:
                original_image = cv2.imread(original_photo_path)
                if original_image is not None:
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    height, width = original_image.shape[:2]
                    max_size = 250
                    if max(height, width) > max_size:
                        scale = max_size / max(height, width)
                        new_width = int(width * scale)
                        new_height = int(height * scale)
                        original_image = cv2.resize(original_image, (new_width, new_height))
                    
                    original_image_rgb = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)
                    original_pil = Image.fromarray(original_image_rgb)
                    original_photo = ImageTk.PhotoImage(original_pil)
                    
                    photo_label = ttk.Label(photo_frame, image=original_photo)
                    photo_label.image = original_photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                    photo_label.pack(pady=10)
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            except Exception as e:
                ttk.Label(photo_frame, text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {e}").pack(pady=10)
        elif face_photo_path and os.path.exists(face_photo_path):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –ª–∏—Ü–æ
            try:
                face_image = cv2.imread(face_photo_path, cv2.IMREAD_GRAYSCALE)
                if face_image is not None:
                    face_image = cv2.resize(face_image, (200, 200))
                    face_image_rgb = cv2.cvtColor(face_image, cv2.COLOR_GRAY2RGB)
                    face_pil = Image.fromarray(face_image_rgb)
                    face_photo = ImageTk.PhotoImage(face_pil)
                    
                    photo_label = ttk.Label(photo_frame, image=face_photo)
                    photo_label.image = face_photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                    photo_label.pack(pady=10)
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞")
            except Exception as e:
                ttk.Label(photo_frame, text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ª–∏—Ü–∞: {e}").pack(pady=10)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            stored_faces = self.face_recognizer.get_stored_face_images(name)
            if stored_faces:
                face_image = stored_faces[0]
                face_image = cv2.resize(face_image, (200, 200))
                face_image_rgb = cv2.cvtColor(face_image, cv2.COLOR_GRAY2RGB) if len(face_image.shape) == 2 else face_image
                
                face_pil = Image.fromarray(face_image_rgb)
                face_photo = ImageTk.PhotoImage(face_pil)
                
                photo_label = ttk.Label(photo_frame, image=face_photo)
                photo_label.image = face_photo
                photo_label.pack(pady=10)
            else:
                ttk.Label(photo_frame, text="–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", font=("Arial", 10, "italic")).pack(pady=20)
        
        # –ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤
        history_frame = ttk.LabelFrame(info_window, text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ö–æ–¥—ã/–≤—ã—Ö–æ–¥—ã")
        history_frame.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        all_history = self.face_recognizer.get_entry_history()
        person_history = [entry for entry in all_history if entry['name'] == name]
        
        if person_history:
            history_text = tk.Text(history_frame, height=6, state=tk.DISABLED, font=("Arial", 9))
            history_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
            
            history_text.config(state=tk.NORMAL)
            for entry in reversed(person_history[-10:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
                history_text.insert(tk.END, f"{entry['action']} - {entry['time']}\n")
            history_text.config(state=tk.DISABLED)
        else:
            ttk.Label(history_frame, text="–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", font=("Arial", 10, "italic")).pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ttk.Button(info_window, text="–ó–∞–∫—Ä—ã—Ç—å", 
                  command=info_window.destroy).pack(pady=10)
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if hasattr(self, 'cap') and self.cap:
            self.cap.release()


def main():
    root = tk.Tk()
    app = PersonnelApp(root)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        if hasattr(app, 'cap') and app.cap:
            app.cap.release()
        cv2.destroyAllWindows()


if __name__ == "__main__":
    main()
